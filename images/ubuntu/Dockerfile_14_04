FROM docker.io/library/ubuntu:14.04

LABEL org.opencontainers.image.title="Android AOSP build image"
LABEL org.opencontainers.image.description="Android AOSP container for build system"
LABEL org.opencontainers.image.url=https://github.com/Akipe/android-aosp-build-docker
LABEL org.opencontainers.image.authors="Julien Milletre Akipe <code.julien@milletre.fr>"
LABEL maintainer="Julien Milletre Akipe <code.julien@milletre.fr>"
LABEL org.opencontainers.image.licenses=MIT
LABEL org.opencontainers.image.source=https://github.com/Akipe/android-aosp-build-docker

ENV \
    # user
    UID=1000 \
    GID=1000 \
    # ccache specifics
    CCACHE_SIZE=50G \
    CCACHE_DIR=/android/ccache \
    USE_CCACHE=1 \
    CCACHE_COMPRESS=1 \
    # java
    JAVA_HOME=/usr/lib/jvm/java-8-openjdk \
    ANDROID_JACK_VM_ARGS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G" \
    # other
    LC_ALL=C

# Install and upgrades packages
RUN apt-get update \
    && apt-get dist-upgrade --yes \
    && apt-get remove --yes \
        openjdk-* \
        icedtea-* \
    && apt-get install --yes \
        bc \
        bison \
        build-essential \
        ccache \
        curl \
        flex \
        g++-multilib \
        gcc-multilib \
        git \
        gnupg \
        gperf \
        imagemagick \
        lib32ncurses5-dev \
        lib32readline-dev \
        lib32z-dev \
        lib32z1-dev \
        liblz4-tool \
        libc6-dev-i386 \
        libgl1-mesa-dev \
        libncurses5 \
        libncurses5-dev \
        libsdl1.2-dev \
        libssl-dev \
        libwxgtk2.8-dev \
        libx11-dev \
        libxml2 \
        libxml2-utils \
        pngcrush \
        python-pip \
        python-virtualenv \
        python3-dev \
        python3-pip \
        lzop \
        rsync \
        schedtool \
        software-properties-common \
        squashfs-tools \
        sudo \
        unzip \
        x11proto-core-dev \
        xsltproc \
        zip \
        zlib1g-dev \
        python3-dev \
        python3-networkx \
        python3-pip \
        wget \
        openjdk-7-jdk \
        openjdk-7-jre \
        openjdk-7-jre-headless

# Install openjdk 8
RUN wget -O /tmp/openjdk-8-jre-headless.deb http://old-releases.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre-headless_8u45-b14-1_amd64.deb \
    && wget -O /tmp/openjdk-8-jre.deb http://old-releases.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre_8u45-b14-1_amd64.deb \
    && wget -O /tmp/openjdk-8-jdk.deb http://old-releases.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jdk_8u45-b14-1_amd64.deb \
    && dpkg -i \
        /tmp/openjdk-8-jdk.deb \
        /tmp/openjdk-8-jre.deb \
        /tmp/openjdk-8-jre-headless.deb \
    && rm \
        /tmp/openjdk-8-jdk.deb \
        /tmp/openjdk-8-jre.deb \
        /tmp/openjdk-8-jre-headless.deb \
    && apt-get install --yes -f

# Install repo
RUN curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > /usr/bin/repo \
    && chmod a+x /usr/bin/repo

# RUN pip install virtualenv

# Create user
RUN groupadd --gid $GID --force builder \
    && useradd --gid $GID --uid $UID --non-unique builder \
    && mkdir /home/builder \
    && chown -R builder:builder /home/builder \
    && echo "builder ALL=NOPASSWD: ALL" > /etc/sudoers.d/builder

# Create the working directory
RUN mkdir /android \
    && chown -R builder:builder /android

WORKDIR /android

# Configure Python version
RUN virtualenv --system-site-packages venv
#    && ln -s /usr/lib/python2.7/* /android/venv/lib/python2.7/ \
#    && source venv/bin/activate

# Set the entrypoint command
COPY ./assets/entrypoint.sh /

RUN chmod +x /entrypoint.sh \
    && chown -R builder:builder /entrypoint.sh

USER builder

CMD /entrypoint.sh
